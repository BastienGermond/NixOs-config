" My vimrc ~ Synapze

" vim:shiftwidth=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

lua <<EOF

local set = vim.opt

-- We are running Vim not Vi (plugin need)
set.compatible = false

-- Sets the history size
set.history = 500

-- Enable to auto read when a file is changed from outside
set.autoread = true

-- Enable line number
set.number = true

-- Enable underline current line
set.cursorline = true

-- Highlight current line clearly
-- highlight CursorLine cterm=None ctermfg=None ctermbg=lightgray
-- highlight clear CursorLine
vim.cmd([[highlight CursorLine cterm=Underline ctermfg=None ctermbg=None]])

-- Set column delimiter
-- set.colorcolumn = 80
set.wrap = false

-- Disable swapfiles
set.swapfile = false

-- Enable title
set.title = true

-- Disable bell completely
vim.cmd([[set vb t_vb=]])

-- Disable Ex Mode
vim.cmd([[map Q <Nop>]])

-- Enable folding indent
set.foldmethod = "indent"

-- Unfold everything by default
set.foldlevelstart = 99

-- Enable folding with the spacebar
vim.cmd([[nnoremap <space> za]])

-- Insert mode completion configuration
set.completeopt = "menu,menuone,noselect"

-- Use ctrl-[hjkl] to select the active split!
vim.cmd([[
  nmap <silent> <c-k> :wincmd k<CR>
  nmap <silent> <c-j> :wincmd j<CR>
  nmap <silent> <c-h> :wincmd h<CR>
  nmap <silent> <c-l> :wincmd l<CR>
]])

-- Set filetype to json for .schema file
vim.cmd([[autocmd BufNewFile,BufRead *.schema setfiletype json]])

vim.g.spellfile_URL = "https://ftp.nluug.nl/vim/runtime/spell/"

--------------------------------------------------------------------------------
-- User interface
--------------------------------------------------------------------------------

-- Set the minimal amount of lignes under and above the cursor
-- Useful for keeping context when moving with j/k
set.scrolloff = 5

--------------------------------------------------------------------------------
-- Search options
--------------------------------------------------------------------------------

-- Hightlight search
set.hlsearch = true

-- Show the best match so far as typed
set.incsearch = true

-- Clever search, make it case insensitive unless case
set.ignorecase = true
set.smartcase = true

--------------------------------------------------------------------------------
-- Buffer options
--------------------------------------------------------------------------------

-- Write the file when we leave the buffer
set.autowrite = true

--------------------------------------------------------------------------------
-- Identation options
--------------------------------------------------------------------------------

-- Display whitespace characters
set.list = true
set.listchars = {tab = ">─", eol = "¬", trail = "·", nbsp = "¤"}

set.fillchars = {vert = "|"}

-- Expand tab to spaces
set.expandtab = true

-- Enable auto indent
set.autoindent = true
set.smartindent = true

-- Use previous indent when copying
set.copyindent = true

-- Tab key transform to spaces
set.softtabstop = 4

-- Tab is # spaces
set.tabstop = 4

-- The # of spaces for indenting
set.shiftwidth = 4

set.textwidth = 79

-------------------------------------------------------------------------------
-- Mappings
-------------------------------------------------------------------------------

-- Open the quickfix window if there are errors, or close it if there are no
-- errors left
vim.cmd([[noremap <leader>cw :botright :cw<cr>]])

-- Run make silently, then skip the 'Press ENTER to continue'
vim.cmd([[noremap <leader>m :silent! :make! \| :redraw!<cr>]])

-- Write as root, when you forgot to sudoedit
vim.cmd([[cnoreabbrev w!! w !sudo tee % >/dev/null]])

-- removes search highlighting
vim.cmd([[nnoremap <silent> <C-g> :nohl<CR><C-l>]])

EOF

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Load plugins with packer.nvim
lua require('plugins')

" Enable Neovim's builtin spellchecker for buffers with tree-sitter highlighting.
lua require('spellsitter').setup()

" Nix lsp server configuraiton
if executable('rnix-lsp')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'rnix-lsp',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'rnix-lsp']},
        \ 'whitelist': ['nix'],
        \ })
endif

lua <<EOF

-- luasnip setup
local luasnip = require('luasnip')

-- nvim-cmp setup
local cmp = require('cmp')
cmp.setup {
  snippet = {
    expand = function(args)
    require('luasnip').lsp_expand(args.body)
    end,
    },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
      },
    ['<Tab>'] = function(fallback)
    if cmp.visible() then
      cmp.select_next_item()
    elseif luasnip.expand_or_jumpable() then
      vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-expand-or-jump', true, true, true), '')
    else
      fallback()
      end
      end,
      ['<S-Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-jump-prev', true, true, true), '')
      else
        fallback()
        end
        end,
        },
      sources = {
        { name = 'nvim_lsp' },
        { name = 'luasnip' },
        },
      }

    local nvim_lsp = require('lspconfig')
    local null_ls = require("null-ls")

    require('lspconfig').fsautocomplete.setup{}

    local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    local opts = { noremap=true, silent=true }

    require "lsp_signature".on_attach()  -- Note: add in lsp client on-attach

    -- Show documentation
    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)

    -- LSP navigation
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', 'gy', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'ga', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)

    -- Diagnostic actions 
    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)

    if client.resolved_capabilities.document_formatting then
      vim.cmd("autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()")
    end
      end

      -- Setup lspconfig.
      local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
      local servers = { "pyright", "texlab", "gopls", "clangd" }
      for _, lsp in ipairs(servers) do
        nvim_lsp[lsp].setup {
          on_attach = on_attach,
          capabilities = capabilities,
          flags = {
            debounce_text_changes = 150,
            }
          }
        end

        local buf_map = function(bufnr, mode, lhs, rhs, opts)
        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts or {
          silent = true,
          })
        end

        nvim_lsp.tsserver.setup({
        on_attach = function(client, bufnr)
        client.resolved_capabilities.document_formatting = false
        client.resolved_capabilities.document_range_formatting = false
        local ts_utils = require("nvim-lsp-ts-utils")
        ts_utils.setup({})
        ts_utils.setup_client(client)
        buf_map(bufnr, "n", "gs", ":TSLspOrganize<CR>")
        buf_map(bufnr, "n", "gi", ":TSLspRenameFile<CR>")
        buf_map(bufnr, "n", "go", ":TSLspImportAll<CR>")

        on_attach(client, bufnr)
        end,
        })

      -- null_ls
      null_ls.setup({
      sources = {
        null_ls.builtins.diagnostics.eslint,
        null_ls.builtins.code_actions.eslint,
        null_ls.builtins.formatting.prettier,
        },
      on_attach = on_attach,
      })

    -- Init tree-sitter
    require'nvim-treesitter.configs'.setup {
      ensure_installed = { "c", "python", "latex", "nix", "go", "typescript" },
      ignore_install = { }, -- List of parsers to ignore installing
      highlight = {
        enable = true,              -- false will disable the whole extension
        disable = { },  -- list of language that will be disabled
        -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
        -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
        -- Using this option may slow down your editor, and you may see some duplicate highlights.
        -- Instead of true it can also be a list of languages
        additional_vim_regex_highlighting = false,
        },
      }

    -- https://www.reddit.com/r/vim/comments/d77t6j/guide_how_to_setup_ctags_with_gutentags_properly/
    vim.g.gutentags_ctags_exclude = { '*.git', '*.svg', '*.hg', '*/tests/*',
    'build', 'dist', '*sites/*/files/*', 'bin', 'node_modules',
    'bower_components', 'cache', 'compiled', 'docs', 'example', 'bundle',
    'vendor', '*.md', '*-lock.json', '*.lock', '*bundle*.js', '*build*.js',
    '.*rc*', '*.json', '*.min.*', '*.map', '*.bak', '*.zip', '*.pyc',
    '*.class', '*.sln', '*.Master', '*.csproj', '*.tmp', '*.csproj.user',
    '*.cache', '*.pdb', 'tags*', 'cscope.*', '*.css', '*.less', '*.scss',
    '*.exe', '*.dll', '*.mp3', '*.ogg', '*.flac', '*.swp', '*.swo', '*.bmp',
    '*.gif', '*.ico', '*.jpg', '*.png', '*.rar', '*.zip', '*.tar', '*.tar.gz',
    '*.tar.xz', '*.tar.bz2', '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx', }

    vim.g.gutentags_add_default_project_roots = false
    vim.g.gutentags_project_root = {'package.json', '.git'}
    vim.g.gutentags_cache_dir = vim.fn.expand('~/.cache/nvim/ctags/')
    vim.g.gutentags_generate_on_new = true
    vim.g.gutentags_generate_on_missing = true
    vim.g.gutentags_generate_on_write = true
    vim.g.gutentags_generate_on_empty_buffer = true
    vim.cmd([[command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')]])
    vim.g.gutentags_ctags_extra_args = {'--tag-relative=yes', '--fields=+ailmnS', }
EOF

autocmd CursorHoldI * silent! lua vim.lsp.buf.signature_help()

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Make boxes
vmap ,mb !boxes -d stone<CR>
nmap ,mb !!boxes -d stone<CR>
vmap ,cb !boxes -d stone -r<CR>
nmap ,cb !!boxes -d stone -r<CR>

" makes Ascii art font
nmap <leader>F :.!toilet -w 200 -f standard<CR>
nmap <leader>f :.!toilet -w 200 -f small<CR>
" makes Ascii border
nmap <leader>1 :.!toilet -w 200 -f term -F border<CR>

let g:tex_comment_nospell= 1

" Header configuration
let g:header_field_author = 'Bastien Germond'
let g:header_field_author_email = 'bastien.germond@epita.fr'
let g:header_auto_add_header = 0

" Fzf
nnoremap f :Files<CR>
let $FZF_DEFAULT_COMMAND = 'rg --files'

" Suda
let g:suda_smart_edit = 1
