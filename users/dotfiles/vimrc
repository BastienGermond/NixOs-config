" My vimrc ~ Synapze

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" We are running Vim not Vi (plugin need)
set nocompatible

" Sets the history size
set history=500

" Display command being written
set showcmd

" Enables syntax highlighting
syntax on

" Enables filetype detection
filetype on

" Enable filetype-specific indenting
filetype indent on

" Enable filetype-specific plugins
filetype plugin on

" Set to auto read when a file is changed from outside
set autoread

" Set line number
set number

" Underline current line
set cursorline

" Highlight current line clearly
" highlight CursorLine cterm=None ctermfg=None ctermbg=lightgray
" highlight clear CursorLine
highlight CursorLine cterm=Underline ctermfg=None ctermbg=None

" Set column delimiter
set colorcolumn=80
set nowrap

" Disable swapfiles
set noswapfile

" Enable title
set title

" Disable bell completely
set visualbell
set t_vb=

" Disable Ex Mode
map Q <Nop>

" Enable folding indent
set foldmethod=indent

" Unfold everything by default
set foldlevelstart=99

" Enable folding with the spacebar
nnoremap <space> za

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Set filetype to json for .schema file
autocmd BufNewFile,BufRead *.schema setfiletype json

let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set the minimal amount of lignes under and above the cursor
" Useful for keeping context when moving with j/k
set scrolloff=5

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Hightlight search
set hlsearch

" Show the best match so far as typed
set incsearch

" Clever search, make it case insensitive unless case
set ignorecase smartcase

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Write the file when we leave the buffer
set autowrite

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Identation options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Display whitespace characters
set list
set listchars=tab:>─,eol:¬,trail:\ ,nbsp:¤

set fillchars=vert:│

" Expand tab to spaces
set expandtab

" Auto/smart indent 
set autoindent smartindent

" Use previous indent when copying
set copyindent

" Tab key transform to spaces
set softtabstop=4

" Tab is # spaces
set tabstop=4

" The # of spaces for indenting
set shiftwidth=4

set textwidth=79

" 80 column limit
highlight OverLength ctermbg=blue ctermfg=white guibg=#592929

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen

function Hightlights_matches()
    match ExtraWhitespace /\s\+\%#\@<!$/ 
    match OverLength /\%80v.\+/
endfunction

autocmd BufEnter,InsertLeave * call Hightlights_matches()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Open the quickfix window if there are errors, or close it if there are no
" errors left
noremap <leader>cw :botright :cw<cr>

" Run make silently, then skip the 'Press ENTER to continue'
noremap <leader>m :silent! :make! \| :redraw!<cr>

" Write as root, when you forgot to sudoedit
cnoreabbrev w!! w !sudo tee % >/dev/null

" removes search highlighting
nnoremap <silent> <C-g> :nohl<CR><C-l>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lsp-installer'
Plug 'L3MON4D3/LuaSnip'

Plug 'ludovicchabant/vim-gutentags'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'vim-python/python-syntax'
Plug 'rust-lang/rust.vim'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/vim-easy-align'
Plug 'rhysd/vim-clang-format'
Plug 'kergoth/vim-bitbake'

Plug 'alpertuna/vim-header'

" Highlight similar words
Plug 'RRethy/vim-illuminate'

" Close quickfix or location list when attached buffer is closed
Plug 'romainl/vim-qf'

" Plug 'zivyangll/git-blame.vim'

Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'stephpy/vim-yaml'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Nvim suggestion
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/nvim-cmp'

call plug#end()

lua <<EOF
    local lsp_installer = require("nvim-lsp-installer")

    lsp_installer.on_server_ready(function(server)
        local opts = {}
        -- This setup() function is exactly the same as lspconfig's setup function (:help lspconfig-quickstart)
        server:setup(opts)
        vim.cmd [[ do User LspAttachBuffers ]]
    end)
EOF

set completeopt=menu,menuone,noselect

if executable('rnix-lsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rnix-lsp',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'rnix-lsp']},
        \ 'whitelist': ['nix'],
        \ })
endif

lua <<EOF
  -- luasnip setup
  local luasnip = require 'luasnip'

  -- nvim-cmp setup
  local cmp = require 'cmp'
  cmp.setup {
    snippet = {
      expand = function(args)
        require('luasnip').lsp_expand(args.body)
      end,
    },
    mapping = {
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
      ['<Tab>'] = function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif luasnip.expand_or_jumpable() then
          vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-expand-or-jump', true, true, true), '')
        else
          fallback()
        end
      end,
      ['<S-Tab>'] = function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.jumpable(-1) then
          vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-jump-prev', true, true, true), '')
        else
          fallback()
        end
      end,
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'luasnip' },
    },
  }

  local nvim_lsp = require('lspconfig')

  require('lspconfig').fsautocomplete.setup{}

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  local servers = { "pyright", "ccls" }
  for _, lsp in ipairs(servers) do
      nvim_lsp[lsp].setup {
          on_attach = on_attach,
          capabilities = capabilities,
          flags = {
              debounce_text_changes = 150,
              }
          }
  end
  
  -- Init tree-sitter
  require'nvim-treesitter.configs'.setup {
      ensure_installed = { "c", "python", "latex", "nix" },
      ignore_install = { }, -- List of parsers to ignore installing
      highlight = {
      enable = true,              -- false will disable the whole extension
      disable = { },  -- list of language that will be disabled
      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
      },
  }
EOF

" NERDTree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = 'v'

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Make boxes
vmap ,mb !boxes -d stone<CR>
nmap ,mb !!boxes -d stone<CR>
vmap ,cb !boxes -d stone -r<CR>
nmap ,cb !!boxes -d stone -r<CR>

" makes Ascii art font
nmap <leader>F :.!toilet -w 200 -f standard<CR>
nmap <leader>f :.!toilet -w 200 -f small<CR>
" makes Ascii border
nmap <leader>1 :.!toilet -w 200 -f term -F border<CR>

let g:tex_comment_nospell= 1

" Header configuration
let g:header_field_author = 'Bastien Germond'
let g:header_field_author_email = 'bastien.germond@epita.fr'
let g:header_auto_add_header = 0

" Suda
let g:suda_smart_edit = 1
